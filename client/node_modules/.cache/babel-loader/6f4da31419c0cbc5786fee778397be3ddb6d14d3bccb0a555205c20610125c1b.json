{"ast":null,"code":"var _jsxFileName = \"/Users/noshinbashar/Desktop/BrainFlix/brainflix/src/components/Comments/Comments.jsx\";\nimport \"./Comments.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Comments(props) {\n  function formatDate(timestamp) {\n    // Convert the timestamp to a Date object\n    const date = new Date(timestamp);\n\n    // Get the day, month, and year\n    const day = date.getDate();\n    const month = date.getMonth() + 1; // Months are zero-indexed\n    const year = date.getFullYear();\n\n    // Create the formatted string\n    const formattedDate = `${day}/${month}/${year}`;\n    return formattedDate;\n  }\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"comments__box\",\n        children: props.Comments.comments.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.comment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formatDate(item.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 25\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = Comments;\nexport default Comments;\n\n// \"id\": \"35bba08b-1b51-4153-ba7e-6da76b5ec1b9\",\n// \"name\": \"Noah Duncan\",\n// \"comment\": \"Your insights into the future of AI are enlightening! The intersection of technology and ethics is particularly thought-provoking. Keep us updated on the tech front!\",\n// \"likes\": 0,\n// \"timestamp\": 1691731062000\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","Fragment","_Fragment","Comments","props","formatDate","timestamp","date","Date","day","getDate","month","getMonth","year","getFullYear","formattedDate","console","log","children","className","comments","map","item","name","fileName","_jsxFileName","lineNumber","columnNumber","comment","id","_c","$RefreshReg$"],"sources":["/Users/noshinbashar/Desktop/BrainFlix/brainflix/src/components/Comments/Comments.jsx"],"sourcesContent":["import \"./Comments.scss\"\n\nfunction Comments(props) {\n\n    function formatDate(timestamp) {\n        // Convert the timestamp to a Date object\n        const date = new Date(timestamp);\n\n        // Get the day, month, and year\n        const day = date.getDate();\n        const month = date.getMonth() + 1; // Months are zero-indexed\n        const year = date.getFullYear();\n\n        // Create the formatted string\n        const formattedDate = `${day}/${month}/${year}`;\n\n        return formattedDate;\n    }\n\n\n    console.log(props)\n    return(\n        <>\n        <div className=\"comments\">\n        <ul className=\"comments__box\">\n            {props.Comments.comments.map((item) => {\n                return(\n\n                    <li className=\"list\" key={item.id}>\n                        <p>{item.name}</p>\n                        <p>{item.comment}</p>\n                        {/* <p>{item.likes}</p> */}\n                        {/* <p>{item.timestamp}</p> */}\n                        <p>{formatDate(item.timestamp)}</p>\n                    </li>\n                )\n            })}\n\n        </ul>\n        </div>\n        </>\n\n    )\n}\n\nexport default Comments\n\n// \"id\": \"35bba08b-1b51-4153-ba7e-6da76b5ec1b9\",\n// \"name\": \"Noah Duncan\",\n// \"comment\": \"Your insights into the future of AI are enlightening! The intersection of technology and ethics is particularly thought-provoking. Keep us updated on the tech front!\",\n// \"likes\": 0,\n// \"timestamp\": 1691731062000\n\n"],"mappings":";AAAA,OAAO,iBAAiB;AAAA,SAAAA,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExB,SAASC,QAAQA,CAACC,KAAK,EAAE;EAErB,SAASC,UAAUA,CAACC,SAAS,EAAE;IAC3B;IACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;;IAEhC;IACA,MAAMG,GAAG,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC;IAC1B,MAAMC,KAAK,GAAGJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACnC,MAAMC,IAAI,GAAGN,IAAI,CAACO,WAAW,CAAC,CAAC;;IAE/B;IACA,MAAMC,aAAa,GAAI,GAAEN,GAAI,IAAGE,KAAM,IAAGE,IAAK,EAAC;IAE/C,OAAOE,aAAa;EACxB;EAGAC,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;EAClB,oBACIJ,OAAA,CAAAE,SAAA;IAAAgB,QAAA,eACAlB,OAAA;MAAKmB,SAAS,EAAC,UAAU;MAAAD,QAAA,eACzBlB,OAAA;QAAImB,SAAS,EAAC,eAAe;QAAAD,QAAA,EACxBd,KAAK,CAACD,QAAQ,CAACiB,QAAQ,CAACC,GAAG,CAAEC,IAAI,IAAK;UACnC,oBAEItB,OAAA;YAAImB,SAAS,EAAC,MAAM;YAAAD,QAAA,gBAChBlB,OAAA;cAAAkB,QAAA,EAAII,IAAI,CAACC;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAClB3B,OAAA;cAAAkB,QAAA,EAAII,IAAI,CAACM;YAAO;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAGrB3B,OAAA;cAAAkB,QAAA,EAAIb,UAAU,CAACiB,IAAI,CAAChB,SAAS;YAAC;cAAAkB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA,GALbL,IAAI,CAACO,EAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAM7B,CAAC;QAEb,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC,gBACJ,CAAC;AAGX;AAACG,EAAA,GAzCQ3B,QAAQ;AA2CjB,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}